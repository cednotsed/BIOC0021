sd(corrs)
t.test(corrs, mu=0, alternative = "two.sided")
corr(x)
cor(df)
temp_df
corrs <- c()
for (i in seq(1, 100)) {
temp <- sample(seq(1, nrow(df)), replace = T)
temp_df <- df[temp, ]
corr <- cor(temp_df[, 1], temp_df[, 2])
corrs <- c(corrs, corr)
}
t.test(corrs, mu=0, alternative = "two.sided")
for (i in seq(1, 100)) {
temp <- sample(seq(1, nrow(df)), replace = T)
temp_df <- df[temp, ]
corr <- cor(temp_df[, 1], temp_df[, 2])
corrs <- c(corrs, corr)
}
percentile(corr)
summary(corrs)
temp
corrs <- c()
for (i in seq(1, 100)) {
temp <- sample(seq(1, nrow(df)), replace = T)
temp_df <- df[temp, ]
corr <- cor(temp_df[, 1], temp_df[, 2])
corrs <- c(corrs, corr)
}
t.test(corrs, mu=0, alternative = "two.sided")
test <- c(0.01, 0.04, 0.001, 0.03, 0.002, 0.05, 0.1)
test2 <- c(0.1, 0.4, -0.1, -0.5, -0.3, -0.3, -0.4)
df <- data.frame(test, test2)
corrs <- c()
for (i in seq(1, 100)) {
temp <- sample(seq(1, nrow(df)), replace = T)
temp_df <- df[temp, ]
corr <- cor(temp_df[, 1], temp_df[, 2])
corrs <- c(corrs, corr)
}
t.test(corrs, mu=0, alternative = "two.sided")
test <- c(0.01, 0.04, 0.001, 0.03, 0.002, 0.05, 0.1)
test2 <- c(0.1, 0.4, -0.1, -0.5, -0.3, -0.3, -0.4)
df <- data.frame(test, test2)
corrs <- c()
for (i in seq(1, 1000)) {
temp <- sample(seq(1, nrow(df)), replace = T)
temp_df <- df[temp, ]
corr <- cor(temp_df[, 1], temp_df[, 2])
corrs <- c(corrs, corr)
}
t.test(corrs, mu=0, alternative = "two.sided")
boot(df, cor, 1000)
install.packages("boot",dep=TRUE)
library(boot)
install.packages("boot",dep=TRUE)
boot(df, cor, 1000)
boot(data = df, corr, 1000)
corr <- function(d, i){
d2 <- d[i,]
return(cor(d2$write, d2$math))
}
boot(data = df, corr, 1000)
boot(data = matrix(df), corr, 1000)
corr <- function(d, i){
d2 <- d[i,]
return(cor(d2$test, d2$test2))
}
boot(data = df, corr, 1000)
boots <- boot(data = df, corr, 1000)
mean(boots$t) - boot$0
mean(boots$t) - boots$0
mean(boots$t) - boots$t0
boots$t0
boots$t
sd(boots$t)
boots
hist(boots)
hist(boots$t)
summary(boots)
summary(boots$t)
boot.ci(boot.out = boots, type = c("norm"))
mean(boots$t)
sd(boost$t)
sd(boots$t)
sd(corrs)
mean(corrs)
mean(corrs)/(0.3783149/sqrt(length(corrs)))
confint(corrs)
quantile(corrs)
mean(abs(boots$t0) < abs(boots$t-mean(boots$t)))
abs(boots$t-mean(boots$t)))
abs(boots$t-mean(boots$t)))
abs(boots$t-mean(boots$t))
mean(abs(boots$t-mean(boots$t)) >= 0)
quantile(corrs, c(0.025, 0.975))
setwd(~/Downloads)
getwd()
require(Biostrings)
dna <- readDNAStringSet("sequence.fasta")
require(Biostrings)
require(seqtool)
dna <- readDNAStringSet("sequence.fasta")
require(Biostrings)
install.packages('Xvector')
install.packages('Biostrings')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
require(Biostrings)
dna <- readDNAStringSet("sequence.fasta")
dna
mono <- oligonucleotideFrequency(dna,
width = 4,
step = 4,
as.prob = T,
with.labels = T)
mono
mono <- oligonucleotideFrequency(dna,
width = 4,
step = 4,
as.prob = F,
with.labels = T)
mono['TTTT']
mono
names(mono)
colnames(mono)
mono$AAAA
mono$'AAAA'
data.frame(mono)
str(mono)
mono["TTTT"]
mono["AAAA"]
test <- data.frame(mono)
dim(test)
test <- list(mono)
test
names(test)
test['AAAA']
mono
require(Biostrings)
dna <- readDNAStringSet("sequence.fasta")
mono <- oligonucleotideFrequency(dna,
width = 5,
step = 5,
as.prob = F,
with.labels = T)
mono
View(df)
View(mono)
log((10000 * ((1 - 0.0001) / 0.0001)), base=20)
log((200 * ((1 - 0.0001) / 0.0001)), base=20)
7/15
x <- c('Morganella', 'Blautia', 'Raoultella', 'Cellulosimicrobium',
'Campylobacter', 'Alloprevotella', 'Megasphaera', 'Bacteroides',
'Shewanella', 'Salmonella', 'Citrobacter', 'Cellulomonas',
'Stenotrophomonas', 'Oerskovia', 'Enterobacter', 'Cupriavidus',
'Rhodococcus', 'Clostridioides', 'Klebsiella', 'Pandoraea',
'Cronobacter')
y <- c('Bacillus', 'Burkholderia', 'Enterococcus', 'Aeromonas', 'Cronobacter',
'Cytomegalovirus', 'Lymphocryptovirus', 'Campylobacter', 'Pantoea',
'Shigella', 'Klebsiella', 'Cellulomonas', 'Salmonella', 'Shewanella',
'Megasphaera', 'Stenotrophomonas', 'Agrobacterium', 'Oerskovia',
'Prevotella', 'Escherichia', 'Blautia', 'Bacteroides', 'Enterobacter',
'Alphatorquevirus', 'Veillonella')
intersection(x, y)
intersect(x, y)
length(intersect(x, y))
devtools::install_github("elizagrames/litsearchr")
remotes::install_github("elizagrames/litsearchr", ref="main")
require(fs)
search()
remove.package("fs")
remove.packages("fs")
devtools::install_github("amcrisan/Adjutant")
install.packages("pkgload")
devtools::install_github("amcrisan/Adjutant")
install.packages("processx")
install.packages("processx")
devtools::install_github("amcrisan/Adjutant")
install.packages("ps")
install.packages("ps")
devtools::install_github("amcrisan/Adjutant")
devtools::install_github("amcrisan/Adjutant")
install.packages("rvest")
devtools::install_github("amcrisan/Adjutant")
library(adjutant)
library(dplyr)
library(ggplot2)
library(tidytext) #for stop words
df<-processSearch("(microbiome OR virome OR (dark AND matter)) AND torque and teno and virus",retmax=2000)
tidy_df<-tidyCorpus(corpus = df)
tsneObj<-runTSNE(tidy_df,check_duplicates=FALSE)
tidy_df
df<-processSearch("(microbiome OR virome) AND torque and teno and virus",retmax=2000)
df<-processSearch("(microbiome OR virome) AND torque AND teno AND virus",retmax=5000)
tidy_df<-tidyCorpus(corpus = df)
tsneObj<-runTSNE(tidy_df, check_duplicates=FALSE)
?runTSNE
tsneObj<-runTSNE(tidy_df, check_duplicates=FALSE, perplexity = 50)
tsneObj<-runTSNE(tidy_df, check_duplicates=FALSE, perplexity = 20)
tidy_df
require(Rtsne)
X <- tidy_df[, c("tf", "idf", "tf_idf")]
Rtsne(X = X)
Rtsne
X
tidy_df
Rtsne(X = X, check.duplicates = F)
Rtsne(X = X, check_duplicates = F)
tsne$y
tsne <- Rtsne(X = X, check_duplicates = F)
?Rtsne
tsne <- Rtsne(X = X, check_duplicates = F, PCA = F)
tsne <- Rtsne(X = X, check_duplicates = F, pca = F)
tsne <- Rtsne(X = X, check_duplicates = F, pca = F, verbose = T)
#add t-SNE co-ordinates to df object
df<-inner_join(df,tsne$Y,by="PMID")
df
tsne
tsne$Y
dim(tsne$Y)
df
dim(df)
dim(tidy_df)
colnames(tidy_df)
tsneObj <- data.frame(tsne$Y)
tsneObj$PMID <- tidy_df$PMID
#add t-SNE co-ordinates to df object
df<-inner_join(tidy_df),tsne$Y,by="PMID")
#add t-SNE co-ordinates to df object
df<-inner_join(tidy_df,tsne$Y,by="PMID")
tidy_df<-tidyCorpus(corpus = df)
tidy_df
#add t-SNE co-ordinates to df object
df<-inner_join(tidy_df, tsneObj, by="PMID")
df
# plot the t-SNE results
ggplot(df,aes(x=X1,y=X2))+
geom_point(alpha=0.2)+
theme_bw()
df
df<-processSearch("(microbiome OR virome) AND torque AND teno AND virus",retmax=5000)
plot_df
tidy_df<-tidyCorpus(corpus = df)
X <- tidy_df[, c("tf", "idf", "tf_idf")]
tsneObj<-runTSNE(tidy_df, check_duplicates=FALSE, perplexity = 20)
tsne <- Rtsne(X = X, check_duplicates = F, pca = F, verbose = T)
tsneObj <- data.frame(tsne$Y)
tsneObj$PMID <- tidy_df$PMID
#add t-SNE co-ordinates to df object
plot_df<-inner_join(tidy_df, tsneObj, by="PMID")
df
View(df)
library(adjutant) #this gets R ready to run Adjutant
runAdjutant()
tidy_df
library(adjutant)
library(dplyr)
library(ggplot2)
library(tidytext) #for stop words
require(Rtsne)
#also set a seed - there is some randomness in the analysis.
set.seed(416)
df<-processSearch("(microbiome OR virome) AND torque AND teno AND virus",retmax=10000)
tidy_df<-tidyCorpus(corpus = df)
# X <- tidy_df[, c("tf", "idf", "tf_idf")]
tsneObj<-runTSNE(tidy_df, check_duplicates=FALSE)
# tsne <- Rtsne(X = X, check_duplicates = F, pca = F, verbose = T)
# tsneObj <- data.frame(tsne$Y)
# tsneObj$PMID <- tidy_df$PMID
#add t-SNE co-ordinates to df object
# plot_df<-inner_join(tidy_df, tsneObj, by="PMID")
df<-inner_join(df,tsneObj$Y,by="PMID")
df
df<-processSearch("(microbiome OR virome) AND torque AND teno AND virus",retmax=10000)
tidy_df<-tidyCorpus(corpus = df)
# X <- tidy_df[, c("tf", "idf", "tf_idf")]
# tsneObj<-runTSNE(tidy_df, check_duplicates=FALSE)
tsne <- Rtsne(X = X, check_duplicates = F, pca = F, verbose = T)
tsneObj <- data.frame(tsne$Y)
tsneObj$PMID <- tidy_df$PMID
#add t-SNE co-ordinates to df object
plot_df<-inner_join(tidy_df, tsneObj, by="PMID")
tidy_df<-tidyCorpus(corpus = df)
X <- tidy_df[, c("tf", "idf", "tf_idf")]
# tsneObj<-runTSNE(tidy_df, check_duplicates=FALSE)
tsne <- Rtsne(X = X, check_duplicates = F, pca = F, verbose = T)
tsneObj <- data.frame(tsne$Y)
tsneObj$PMID <- tidy_df$PMID
#add t-SNE co-ordinates to df object
plot_df<-inner_join(tidy_df, tsneObj, by="PMID")
# df<-inner_join(df,tsneObj$Y,by="PMID")
# plot the t-SNE results
ggplot(df,aes(x=X1,y=X2))+
geom_point(alpha=0.2)+
theme_bw()
# HDBSCan
head(plot_df)
# X <- tidy_df[, c("tf", "idf", "tf_idf")]
# tsneObj<-runTSNE(tidy_df, check_duplicates=FALSE)
tsne <- Rtsne(X = tidy_df, check_duplicates = F, pca = F, verbose = T)
tsneObj <- data.frame(tsne$Y)
head(tidy_df)
# HDBSCan
optClusters <- optimalParam(tidy_df)
tidy_df
tidy_df
tsneObj <- data.frame(tsne$Y)
tsneObj$PMID <- tidy_df$PMID
#add t-SNE co-ordinates to df object
plot_df<-inner_join(tidy_df, tsneObj, by="PMID")
# HDBSCan
optClusters <- optimalParam(tidy_df)
# HDBSCan
optClusters <- optimalParam(data.frame(tidy_df$X1, tidy_df$X2))
tidy_df$X1
# HDBSCan
optClusters <- optimalParam(data.frame(plot_df$X1, plot_df$X2))
# HDBSCan
optClusters <- optimalParam(data.frame(X1=plot_df$X1, X2=plot_df$X2))
# X <- tidy_df[, c("tf", "idf", "tf_idf")]
tsneObj<-runTSNE(tidy_df, check_duplicates=FALSE)
?runTSNE
runTSNE
# X <- tidy_df[, c("tf", "idf", "tf_idf")]
tsneObj<-runTSNE(tidy_df, check_duplicates=FALSE, perplexity = 20)
runTSNE
cast_dtm
runTSNE
# df<-inner_join(df,tsneObj$Y,by="PMID")
test <- function (tidyCorpus_df = NULL, ...) {
dtm <- cast_dtm(tidyCorpus_df, PMID, wordStemmed, tf_idf)
tsneObj <- Rtsne(as.matrix(dtm), ...)
tsneObj$Y <- data.frame(cbind(rownames(dtm), tsneObj$Y),
stringsAsFactors = F)
colnames(tsneObj$Y) <- c("PMID", paste("tsneComp",
1:(ncol(tsneObj$Y) - 1), sep = ""))
tsneObj$Y[, 2:ncol(tsneObj$Y)] <- sapply(tsneObj$Y[, 2:ncol(tsneObj$Y)],
as.numeric) %>% unname()
return(tsneObj)
}
tsneObj<-test(tidy_df, check_duplicates=FALSE, perplexity = 20)
print(as.matrix(dtm))
test <- function (tidyCorpus_df = NULL, ...) {
dtm <- cast_dtm(tidyCorpus_df, PMID, wordStemmed, tf_idf)
print(as.matrix(dtm))
tsneObj <- Rtsne(as.matrix(dtm), ...)
tsneObj$Y <- data.frame(cbind(rownames(dtm), tsneObj$Y),
stringsAsFactors = F)
colnames(tsneObj$Y) <- c("PMID", paste("tsneComp",
1:(ncol(tsneObj$Y) - 1), sep = ""))
tsneObj$Y[, 2:ncol(tsneObj$Y)] <- sapply(tsneObj$Y[, 2:ncol(tsneObj$Y)],
as.numeric) %>% unname()
return(tsneObj)
}
tsneObj<-test(tidy_df, check_duplicates=FALSE, perplexity = 20)
tsneObj<-test(tidy_df, perplexity = 20, check_duplicates=FALSE, )
tsneObj<-test(tidy_df, perplexity = 20, check_duplicates=FALSE)
runTSNE <- function (tidyCorpus_df = NULL, ...) {
dtm <- cast_dtm(tidyCorpus_df, PMID, wordStemmed, tf_idf)
print(as.matrix(dtm))
tsneObj <- Rtsne(as.matrix(dtm), perplexity = 20, ...)
tsneObj$Y <- data.frame(cbind(rownames(dtm), tsneObj$Y),
stringsAsFactors = F)
colnames(tsneObj$Y) <- c("PMID", paste("tsneComp",
1:(ncol(tsneObj$Y) - 1), sep = ""))
tsneObj$Y[, 2:ncol(tsneObj$Y)] <- sapply(tsneObj$Y[, 2:ncol(tsneObj$Y)],
as.numeric) %>% unname()
return(tsneObj)
}
tsneObj<- runTSNE(tidy_df, perplexity = 20, check_duplicates=FALSE)
runTSNE <- function (tidyCorpus_df) {
dtm <- cast_dtm(tidyCorpus_df, PMID, wordStemmed, tf_idf)
print(as.matrix(dtm))
tsneObj <- Rtsne(as.matrix(dtm), perplexity = 20, check_duplicates = F)
tsneObj$Y <- data.frame(cbind(rownames(dtm), tsneObj$Y),
stringsAsFactors = F)
colnames(tsneObj$Y) <- c("PMID", paste("tsneComp",
1:(ncol(tsneObj$Y) - 1), sep = ""))
tsneObj$Y[, 2:ncol(tsneObj$Y)] <- sapply(tsneObj$Y[, 2:ncol(tsneObj$Y)],
as.numeric) %>% unname()
return(tsneObj)
}
tsneObj<- runTSNE(tidy_df, perplexity = 20, check_duplicates=FALSE)
tsneObj<- runTSNE(tidy_df)
runTSNE <- function (tidyCorpus_df) {
dtm <- cast_dtm(tidyCorpus_df, PMID, wordStemmed, tf_idf)
print(nrow(as.matrix(dtm)))
tsneObj <- Rtsne(as.matrix(dtm), perplexity = 20, check_duplicates = F)
tsneObj$Y <- data.frame(cbind(rownames(dtm), tsneObj$Y),
stringsAsFactors = F)
colnames(tsneObj$Y) <- c("PMID", paste("tsneComp",
1:(ncol(tsneObj$Y) - 1), sep = ""))
tsneObj$Y[, 2:ncol(tsneObj$Y)] <- sapply(tsneObj$Y[, 2:ncol(tsneObj$Y)],
as.numeric) %>% unname()
return(tsneObj)
}
tsneObj<- runTSNE(tidy_df)
dtm
runTSNE <- function (tidyCorpus_df) {
dtm <- cast_dtm(tidyCorpus_df, PMID, wordStemmed, tf_idf)
print(dim(as.matrix(dtm)))
tsneObj <- Rtsne(as.matrix(dtm), perplexity = 20, check_duplicates = F)
tsneObj$Y <- data.frame(cbind(rownames(dtm), tsneObj$Y),
stringsAsFactors = F)
colnames(tsneObj$Y) <- c("PMID", paste("tsneComp",
1:(ncol(tsneObj$Y) - 1), sep = ""))
tsneObj$Y[, 2:ncol(tsneObj$Y)] <- sapply(tsneObj$Y[, 2:ncol(tsneObj$Y)],
as.numeric) %>% unname()
return(tsneObj)
}
tsneObj<- runTSNE(tidy_df)
print(t(as.matrix(dtm)))
runTSNE <- function (tidyCorpus_df) {
dtm <- cast_dtm(tidyCorpus_df, PMID, wordStemmed, tf_idf)
# print(t(as.matrix(dtm)))
tsneObj <- Rtsne(t(as.matrix(dtm)), perplexity = 20, check_duplicates = F)
tsneObj$Y <- data.frame(cbind(rownames(dtm), tsneObj$Y),
stringsAsFactors = F)
colnames(tsneObj$Y) <- c("PMID", paste("tsneComp",
1:(ncol(tsneObj$Y) - 1), sep = ""))
tsneObj$Y[, 2:ncol(tsneObj$Y)] <- sapply(tsneObj$Y[, 2:ncol(tsneObj$Y)],
as.numeric) %>% unname()
return(tsneObj)
}
tsneObj<- runTSNE(tidy_df)
library(adjutant)
tsneObj<-runTSNE(tidy_df,check_duplicates=FALSE)
dtm <- cast_dtm(tidy_df, PMID, wordStemmed, tf_idf)
# print(t(as.matrix(dtm)))
tsneObj <- Rtsne(t(as.matrix(dtm)), perplexity = 20, check_duplicates = F)
tsneObj$Y <- data.frame(cbind(rownames(dtm), tsneObj$Y),
stringsAsFactors = F)
View(dtm)
print(t(as.matrix(dtm)))
tsneObj <- Rtsne(as.matrix(dtm)), perplexity = 20, check_duplicates = F)
tsneObj <- Rtsne(as.matrix(dtm), perplexity = 20, check_duplicates = F)
tsneObj <- Rtsne(as.matrix(dtm), perplexity = 10, check_duplicates = F)
tsneObj <- Rtsne(as.matrix(dtm), perplexity = 5, check_duplicates = F)
setwd("~/../Desktop/year_3/BIOC0021/workspace")
require(litsearchr)
require(igraph)
naiveimport <- litsearchr::import_results(directory = "database_files/torque_teno_virus_all/",
verbose = TRUE)
naiveresults <-
litsearchr::remove_duplicates(naiveimport, field = "title", method = "string_osa")
rakedkeywords <-
litsearchr::extract_terms(
text = paste(naiveresults$title, naiveresults$abstract),
method = "fakerake",
min_freq = 2,
ngrams = TRUE,
min_n = 2,
language = "English"
)
#> Loading required namespace: stopwords
taggedkeywords <-
litsearchr::extract_terms(
keywords = naiveresults$keywords,
method = "tagged",
min_freq = 5,
ngrams = TRUE,
min_n = 1,
max_n = 2,
language = "English"
)
all_keywords <- unique(append(taggedkeywords, rakedkeywords))
naivedfm <-
litsearchr::create_dfm(
elements = paste(naiveresults$title, naiveresults$abstract),
features = all_keywords
)
naivegraph <-
litsearchr::create_network(
search_dfm = as.matrix(naivedfm),
min_studies = 3,
min_occ = 10
)
cutoff <-
litsearchr::find_cutoff(
naivegraph,
# method = "changepoint",
method = "cumulative",
percent = 0.60,
imp_method = "strength"
)
reducedgraph <-
litsearchr::reduce_graph(naivegraph, cutoff_strength = cutoff[1])
searchterms <- litsearchr::get_keywords(reducedgraph)
print(quantile(E(reducedgraph)$weight, c(0.75, 0.90, 0.99)))
t <- 100
print(sum(E(reducedgraph)$weight >= t))
to_remove <- as_ids(E(reducedgraph)[E(reducedgraph)$weight < t])
g <- delete_edges(reducedgraph, to_remove)
bad.vs <- V(g)[degree(g) == 0]
g <- delete.vertices(g, bad.vs)
plot(g,
vertex.size = 3,
vertex.frame.color = NA,
layout = layout_nicely(g),
edge.width = E(g)$weight/20,
label.cex = 0.5,
rescale = F)
plot(g,
vertex.size = 3,
vertex.frame.color = NA,
layout = layout_nicely(g),
edge.width = E(g)$weight/20,
label.cex = 0.5)
print(sum(E(reducedgraph)$weight >= t))
searchterms
